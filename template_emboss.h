// Generated by the Emboss compiler.  DO NOT EDIT!
#ifndef {{header_guard}}  
#define {{header_guard}}
#include <stdint.h>
#include <string.h>

#include <algorithm>
#include <ostream>
#include <type_traits>
#include <utility>

#include "runtime/cpp/emboss_cpp_util.h"

#include "runtime/cpp/emboss_prelude.h"

namespace emboss {
namespace test {

{% if structs %}
{% for struct_name, struct_fields in structs|dictsort|reverse %}
namespace {{struct_name}} {

}  // namespace {{struct_name}}

template <class Storage>
class Generic{{struct_name}}View;
{% endfor %}





{% for struct_name, struct_fields in structs|dictsort|reverse %}
namespace {{struct_name}} {

}  // namespace {{struct_name}}

template <class View>
struct EmbossReservedInternalIsGeneric{{struct_name}}View;

template <class Storage>
class Generic{{struct_name}}View final {
 public:
  Generic{{struct_name}}View() : backing_() {}
  explicit Generic{{struct_name}}View(
       Storage emboss_reserved_local_bytes)
      : backing_(emboss_reserved_local_bytes) 
         {}

  // Views over compatible backing storage should be freely assignable.
  template <typename OtherStorage>
  Generic{{struct_name}}View(
      const Generic{{struct_name}}View<OtherStorage> &emboss_reserved_local_other)
      : backing_{emboss_reserved_local_other.BackingStorage()}
         {}

  // Allow pass-through construction of backing_, but only if there is at least
  // one argument, and, if exactly one argument, that argument is not a
  // (possibly c/v/ref-qualified) Generic{{struct_name}}View.
  //
  // Explicitly ruling out overloads that might match the copy or move
  // constructor is necessary in order for the copy and move constructors to be
  // reliably found during overload resolution.
  template <typename Arg,
            typename = typename ::std::enable_if<
                !EmbossReservedInternalIsGeneric{{struct_name}}View<
                    typename ::std::remove_cv<typename ::std::remove_reference<
                        Arg>::type>::type>::value>::type>
  explicit Generic{{struct_name}}View(
       Arg &&emboss_reserved_local_arg)
      : backing_(::std::forward<Arg>(
            emboss_reserved_local_arg)) 
         {}
  template <typename Arg0, typename Arg1, typename... Args>
  explicit Generic{{struct_name}}View(
       Arg0 &&emboss_reserved_local_arg0,
      Arg1 &&emboss_reserved_local_arg1, Args &&... emboss_reserved_local_args)
      : backing_(::std::forward<Arg0>(emboss_reserved_local_arg0),
                 ::std::forward<Arg1>(emboss_reserved_local_arg1),
                 ::std::forward<Args>(
                     emboss_reserved_local_args)...)
         {}

  template <typename OtherStorage>
  Generic{{struct_name}}View<Storage> &operator=(
      const Generic{{struct_name}}View<OtherStorage> &emboss_reserved_local_other) {
    backing_ = emboss_reserved_local_other.BackingStorage();
    return *this;
  }

 

  bool Ok() const {
    if (!IsComplete()) return false;

    {% for method_name, method_fields in struct_fields.fields|dictsort|reverse %} 
    // If we don't have enough information to determine whether {{method_name}} is
    // present in the structure, then structure.Ok() should be false.
    if (!has_{{method_name}}.Known()) return false;
    // If {{method_name}} is present, but not Ok(), then structure.Ok() should be
    // false.  If {{method_name}} is not present, it does not matter whether it is
    // Ok().
    if (has_{{method_name}}.ValueOrDefault() && !{{method_name}}.Ok()) return false;
    {% endfor %}

    // If we don't have enough information to determine whether IntrinsicSizeInBytes() is
    // present in the structure, then structure.Ok() should be false.
    if (!has_IntrinsicSizeInBytes().Known()) return false;
    // If IntrinsicSizeInBytes() is present, but not Ok(), then structure.Ok() should be
    // false.  If IntrinsicSizeInBytes() is not present, it does not matter whether it is
    // Ok().
    if (has_IntrinsicSizeInBytes().ValueOrDefault() && !IntrinsicSizeInBytes().Ok()) return false;


    // If we don't have enough information to determine whether MaxSizeInBytes() is
    // present in the structure, then structure.Ok() should be false.
    if (!has_MaxSizeInBytes().Known()) return false;
    // If MaxSizeInBytes() is present, but not Ok(), then structure.Ok() should be
    // false.  If MaxSizeInBytes() is not present, it does not matter whether it is
    // Ok().
    if (has_MaxSizeInBytes().ValueOrDefault() && !MaxSizeInBytes().Ok()) return false;


    // If we don't have enough information to determine whether MinSizeInBytes() is
    // present in the structure, then structure.Ok() should be false.
    if (!has_MinSizeInBytes().Known()) return false;
    // If MinSizeInBytes() is present, but not Ok(), then structure.Ok() should be
    // false.  If MinSizeInBytes() is not present, it does not matter whether it is
    // Ok().
    if (has_MinSizeInBytes().ValueOrDefault() && !MinSizeInBytes().Ok()) return false;

    return true;
  }
  Storage BackingStorage() const { return backing_; }
  bool IsComplete() const {
    return backing_.Ok() && IntrinsicSizeInBytes().Ok() &&
           backing_.SizeInBytes() >=
               static_cast</**/ ::std::size_t>(
                   IntrinsicSizeInBytes().UncheckedRead());
  }
  static constexpr ::std::size_t SizeInBytes() {
    return static_cast</**/ ::std::size_t>(IntrinsicSizeInBytes().Read());
  }
  static constexpr bool SizeIsKnown() {
    return IntrinsicSizeInBytes().Ok();
  }


  template <typename OtherStorage>
  bool Equals(
      Generic{{struct_name}}View<OtherStorage> emboss_reserved_local_other) const {
    
    {% for method_name, method_fields in struct_fields.fields|dictsort|reverse %}
    // If this->{{method_name}}() is not equal to emboss_reserved_local_other.{{method_name}}(),
    // then the structures are not equal.

    // If either structure's has_{{method_name}}() is unknown, then default to not
    // Equals().
    //
    // TODO(bolms): Should Equals() return Maybe<bool> and/or return true for
    // non-Ok()-but-equivalent structures?
    if (!has_{{method_name}}().Known()) return false;
    if (!emboss_reserved_local_other.has_{{method_name}}().Known()) return false;

    // If one side has {{method_name}}() but the other side does not, then the fields
    // are not equal.  We use ValueOrDefault() instead of Value() since Value()
    // is more complex and non-constexpr, and we already know that
    // has_{{method_name}}().Known() is true for both structures.
    if (emboss_reserved_local_other.has_{{method_name}}().ValueOrDefault() &&
        !has_{{method_name}}().ValueOrDefault())
      return false;
    if (has_{{method_name}}().ValueOrDefault() &&
        !emboss_reserved_local_other.has_{{method_name}}().ValueOrDefault())
      return false;

    // If both sides have {{method_name}}(), then check that their Equals() returns
    // true.
    if (emboss_reserved_local_other.has_{{method_name}}().ValueOrDefault() &&
        has_{{method_name}}().ValueOrDefault() &&
        !{{method_name}}().Equals(emboss_reserved_local_other.{{method_name}}()))
      return false;
    {% endfor %}

    return true;
  }
  template <typename OtherStorage>
  bool UncheckedEquals(
      Generic{{struct_name}}View<OtherStorage> emboss_reserved_local_other) const {
    {% for method_name, method_fields in struct_fields.fields|dictsort|reverse %}
    // The contract for UncheckedEquals() is that the caller must assure that
    // both views are Ok() (which implies that has_{{method_name}}().Known() is true),
    // and UncheckedEquals() will never perform any assertion checks (which
    // implies that UncheckedEquals() cannot call has_{{method_name}}().Value()).

    // If this->has_{{method_name}}() but !emboss_reserved_local_other.has_{{method_name}}(), or
    // vice versa, then the structures are not equal.  If neither structure
    // has_{{method_name}}(), then {{method_name}}() is considered equal.
    if (emboss_reserved_local_other.has_{{method_name}}().ValueOr(false) &&
        !has_{{method_name}}().ValueOr(false))
      return false;
    if (has_{{method_name}}().ValueOr(false) &&
        !emboss_reserved_local_other.has_{{method_name}}().ValueOr(false))
      return false;

    // If {{method_name}}() is present in both structures, then check its equality.
    if (emboss_reserved_local_other.has_{{method_name}}().ValueOr(false) &&
        has_{{method_name}}().ValueOr(false) &&
        !{{method_name}}().UncheckedEquals(emboss_reserved_local_other.{{method_name}}()))
      return false;
    {% endfor %}

    return true;
  }
  // (Unchecked)CopyFrom copies the number of bytes included in the other view,
  // and ignores the size of the current view.  Even if they differ before
  // copying, the destination view's size should match the source view's size
  // after copying, because any fields used in the calculation of the
  // destination view's size should be updated by the copy.
  template <typename OtherStorage>
  void UncheckedCopyFrom(
      Generic{{struct_name}}View<OtherStorage> emboss_reserved_local_other) const {
    backing_.UncheckedCopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().UncheckedRead());
  }

  template <typename OtherStorage>
  void CopyFrom(
      Generic{{struct_name}}View<OtherStorage> emboss_reserved_local_other) const {
    backing_.CopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().Read());
  }
  template <typename OtherStorage>
  bool TryToCopyFrom(
      Generic{{struct_name}}View<OtherStorage> emboss_reserved_local_other) const {
      return emboss_reserved_local_other.Ok() && backing_.TryToCopyFrom(
        emboss_reserved_local_other.BackingStorage(),
        emboss_reserved_local_other.IntrinsicSizeInBytes().Read());
  }

  template <class Stream>
  bool UpdateFromTextStream(Stream *emboss_reserved_local_stream) const {
    ::std::string emboss_reserved_local_brace;
    if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                      &emboss_reserved_local_brace))
      return false;
    if (emboss_reserved_local_brace != "{") return false;
    for (;;) {
      ::std::string emboss_reserved_local_name;
      if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                        &emboss_reserved_local_name))
        return false;
      if (emboss_reserved_local_name == ",")
        if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                          &emboss_reserved_local_name))
          return false;
      if (emboss_reserved_local_name == "}") return true;
      ::std::string emboss_reserved_local_colon;
      if (!::emboss::support::ReadToken(emboss_reserved_local_stream,
                                        &emboss_reserved_local_colon))
        return false;
      if (emboss_reserved_local_colon != ":") return false;

      {% for method_name, method_fields in struct_fields.fields|dictsort|reverse %}
      // If the field name matches {{method_name}}, handle it, otherwise fall
      // through to the next field.
      if (emboss_reserved_local_name == "{{method_name}}") {
        // TODO(bolms): How should missing optional fields be handled?
        if (!{{method_name}}().UpdateFromTextStream(
                emboss_reserved_local_stream)) {
          return false;
        }
        continue;
      }
      {% endfor %}

      // decode_fields will `continue` if it successfully finds a field.
      return false;
    }
  }

  template <class Stream>
  void WriteToTextStream(
      Stream *emboss_reserved_local_stream,
      ::emboss::TextOutputOptions emboss_reserved_local_options) const {
    ::emboss::TextOutputOptions emboss_reserved_local_field_options =
        emboss_reserved_local_options.PlusOneIndent();
    if (emboss_reserved_local_options.multiline()) {
      emboss_reserved_local_stream->Write("{\n");
    } else {
      emboss_reserved_local_stream->Write("{");
    }
    bool emboss_reserved_local_wrote_field = false;

    {% for method_name, method_fields in struct_fields.fields|dictsort|reverse %}
    if (has_{{method_name}}().ValueOr(false)) {
      if (emboss_reserved_local_field_options.multiline()) {
        emboss_reserved_local_stream->Write(
            emboss_reserved_local_field_options.current_indent());
      } else {
        if (emboss_reserved_local_wrote_field) {
          emboss_reserved_local_stream->Write(",");
        }
        emboss_reserved_local_stream->Write(" ");
      }
      emboss_reserved_local_stream->Write("{{method_name}}: ");
      {{method_name}}().WriteToTextStream(emboss_reserved_local_stream,
                                         emboss_reserved_local_field_options);
      emboss_reserved_local_wrote_field = true;
      if (emboss_reserved_local_field_options.multiline()) {
        emboss_reserved_local_stream->Write("\n");
      }
    }
    {% endfor %}

    // Avoid unused variable warnings for empty structures:
    (void)emboss_reserved_local_wrote_field;
    if (emboss_reserved_local_options.multiline()) {
      emboss_reserved_local_stream->Write(
          emboss_reserved_local_options.current_indent());
      emboss_reserved_local_stream->Write("}");
    } else {
      emboss_reserved_local_stream->Write(" }");
    }
  }

  {% for method_name, method_fields in struct_fields.fields|dictsort|reverse %}
  typename ::emboss::prelude::FloatView<
    /**/ ::emboss::support::FixedSizeViewParameters<{{method_fields.size_in_bit}}, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::{{method_fields.byteorder}}ByteOrderer<typename Storage::template OffsetStorageType</**/0, {{method_fields.offset_in_byte}}>>, {{method_fields.size_in_bit}}>>

 {{method_name}}() const;
  ::emboss::support::Maybe<bool> has_{{method_name}}() const;
 {% endfor %}

 public:
  class EmbossReservedDollarVirtualIntrinsicSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualIntrinsicSizeInBytesView() {}
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView(const EmbossReservedDollarVirtualIntrinsicSizeInBytesView &) = default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView(EmbossReservedDollarVirtualIntrinsicSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView &operator=(const EmbossReservedDollarVirtualIntrinsicSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualIntrinsicSizeInBytesView &operator=(EmbossReservedDollarVirtualIntrinsicSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualIntrinsicSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }
  };

  static constexpr EmbossReservedDollarVirtualIntrinsicSizeInBytesView IntrinsicSizeInBytes() {
    return EmbossReservedDollarVirtualIntrinsicSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_IntrinsicSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }

 public:
  class EmbossReservedDollarVirtualMaxSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualMaxSizeInBytesView() {}
    EmbossReservedDollarVirtualMaxSizeInBytesView(const EmbossReservedDollarVirtualMaxSizeInBytesView &) = default;
    EmbossReservedDollarVirtualMaxSizeInBytesView(EmbossReservedDollarVirtualMaxSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualMaxSizeInBytesView &operator=(const EmbossReservedDollarVirtualMaxSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualMaxSizeInBytesView &operator=(EmbossReservedDollarVirtualMaxSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualMaxSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }
  };

  static constexpr EmbossReservedDollarVirtualMaxSizeInBytesView MaxSizeInBytes() {
    return EmbossReservedDollarVirtualMaxSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_MaxSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }

 public:
  class EmbossReservedDollarVirtualMinSizeInBytesView final {
   public:
    using ValueType = ::std::int32_t;

    constexpr EmbossReservedDollarVirtualMinSizeInBytesView() {}
    EmbossReservedDollarVirtualMinSizeInBytesView(const EmbossReservedDollarVirtualMinSizeInBytesView &) = default;
    EmbossReservedDollarVirtualMinSizeInBytesView(EmbossReservedDollarVirtualMinSizeInBytesView &&) = default;
    EmbossReservedDollarVirtualMinSizeInBytesView &operator=(const EmbossReservedDollarVirtualMinSizeInBytesView &) =
        default;
    EmbossReservedDollarVirtualMinSizeInBytesView &operator=(EmbossReservedDollarVirtualMinSizeInBytesView &&) =
        default;
    ~EmbossReservedDollarVirtualMinSizeInBytesView() = default;

    static constexpr ::std::int32_t Read();
    static constexpr ::std::int32_t UncheckedRead();
    static constexpr bool Ok() { return true; }
    template <class Stream>
    void WriteToTextStream(Stream *emboss_reserved_local_stream,
                           const ::emboss::TextOutputOptions
                               &emboss_reserved_local_options) const {
      ::emboss::support::WriteIntegerViewToTextStream(
          this, emboss_reserved_local_stream, emboss_reserved_local_options);
    }
  };

  static constexpr EmbossReservedDollarVirtualMinSizeInBytesView MinSizeInBytes() {
    return EmbossReservedDollarVirtualMinSizeInBytesView();
  }
  static constexpr ::emboss::support::Maybe<bool> has_MinSizeInBytes() {
    return ::emboss::support::Maybe<bool>(true);
  }

 private:
  Storage backing_;


  // This is a bit of a hack to handle Equals() and UncheckedEquals() between
  // views with different underlying storage -- otherwise, structs with
  // anonymous members run into access violations.
  //
  // TODO(bolms): Revisit this once the special-case code for anonymous members
  // is replaced by explicit read/write virtual fields in the IR.
  template <class OtherStorage>
  friend class Generic{{struct_name}}View;
};
using {{struct_name}}View =
    Generic{{struct_name}}View</**/ ::emboss::support::ReadOnlyContiguousBuffer>;
using {{struct_name}}Writer =
    Generic{{struct_name}}View</**/ ::emboss::support::ReadWriteContiguousBuffer>;

template <class View>
struct EmbossReservedInternalIsGeneric{{struct_name}}View {
  static constexpr bool value = false;
};

template <class Storage>
struct EmbossReservedInternalIsGeneric{{struct_name}}View<
    Generic{{struct_name}}View<Storage>> {
  static constexpr bool value = true;
};

template <typename T>
inline Generic{{struct_name}}View<
    /**/ ::emboss::support::ContiguousBuffer<
        typename ::std::remove_reference<
            decltype(*::std::declval<T>()->data())>::type,
        1, 0>>
Make{{struct_name}}View( T &&emboss_reserved_local_arg) {
  return Generic{{struct_name}}View<
      /**/ ::emboss::support::ContiguousBuffer<
          typename ::std::remove_reference<decltype(
              *::std::declval<T>()->data())>::type,
          1, 0>>(
       ::std::forward<T>(emboss_reserved_local_arg));
}

template <typename T>
inline Generic{{struct_name}}View</**/ ::emboss::support::ContiguousBuffer<T, 1, 0>>
Make{{struct_name}}View( T *emboss_reserved_local_data,
                 ::std::size_t emboss_reserved_local_size) {
  return Generic{{struct_name}}View</**/ ::emboss::support::ContiguousBuffer<T, 1, 0>>(
       emboss_reserved_local_data,
      emboss_reserved_local_size);
}

template <typename T, ::std::size_t kAlignment>
inline Generic{{struct_name}}View<
    /**/ ::emboss::support::ContiguousBuffer<T, kAlignment, 0>>
MakeAligned{{struct_name}}View(
     T *emboss_reserved_local_data,
    ::std::size_t emboss_reserved_local_size) {
  return Generic{{struct_name}}View<
      /**/ ::emboss::support::ContiguousBuffer<T, kAlignment, 0>>(
       emboss_reserved_local_data,
      emboss_reserved_local_size);
}
{% endfor %}



{% for struct_name, struct_fields in structs|dictsort|reverse %}
namespace {{struct_name}} {

}  // namespace {{struct_name}}

{% for method_name, method_fields in struct_fields.fields|dictsort|reverse %}
template <class Storage>
inline typename ::emboss::prelude::FloatView<
    /**/ ::emboss::support::FixedSizeViewParameters<{{method_fields.size_in_bit}}, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::{{method_fields.byteorder}}ByteOrderer<typename Storage::template OffsetStorageType</**/0, {{method_fields.offset_in_byte}}>>, {{method_fields.size_in_bit}}>>

 Generic{{struct_name}}View<Storage>::{{method_name}}()
    const {
  // If it's not possible to read the location of this field, provide a view
  // into a null storage -- the only safe methods to call on it will be Ok() and
  // IsComplete(), but it is necessary to return a view so that client code can
  // call those methods at all.  Similarly, if the end of the field would come
  // before the start, we provide a null storage, though arguably we should
  // not.
  if ( has_{{method_name}}().ValueOr(false) && ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>({{method_fields.size_in_byte}}LL)).Known() &&
      ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>({{method_fields.size_in_byte}}LL)).ValueOr(0) >= 0 && ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>({{method_fields.offset_in_byte}}LL)).Known() &&
      ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>({{method_fields.offset_in_byte}}LL)).ValueOr(0) >= 0) {
    return ::emboss::prelude::FloatView<
    /**/ ::emboss::support::FixedSizeViewParameters<{{method_fields.size_in_bit}}, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::{{method_fields.byteorder}}ByteOrderer<typename Storage::template OffsetStorageType</**/0, {{method_fields.offset_in_byte}}>>, {{method_fields.size_in_bit}}>>

(
         backing_
            .template GetOffsetStorage<0, {{method_fields.offset_in_byte}}>(
                ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>({{method_fields.offset_in_byte}}LL)).ValueOrDefault(), ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>({{method_fields.size_in_byte}}LL)).ValueOrDefault()));
  } else {
    return ::emboss::prelude::FloatView<
    /**/ ::emboss::support::FixedSizeViewParameters<{{method_fields.size_in_bit}}, ::emboss::support::AllValuesAreOk>,
    typename ::emboss::support::BitBlock</**/::emboss::support::{{method_fields.byteorder}}ByteOrderer<typename Storage::template OffsetStorageType</**/0, {{method_fields.offset_in_byte}}>>, {{method_fields.size_in_bit}}>>

();
  }
}

template <class Storage>
inline ::emboss::support::Maybe<bool>
Generic{{struct_name}}View<Storage>::has_{{method_name}}() const {
  return ::emboss::support::Maybe</**/bool>(true);
}
{% endfor %}


namespace {{struct_name}} {
inline constexpr ::std::int32_t IntrinsicSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>({{struct_fields.total_size_in_byte}}LL)).ValueOrDefault();
}
}  // namespace {{struct_name}}

template <class Storage>
inline constexpr ::std::int32_t
Generic{{struct_name}}View<Storage>::EmbossReservedDollarVirtualIntrinsicSizeInBytesView::Read() {
  return {{struct_name}}::IntrinsicSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t Generic{{struct_name}}View<
    Storage>::EmbossReservedDollarVirtualIntrinsicSizeInBytesView::UncheckedRead() {
  return {{struct_name}}::IntrinsicSizeInBytes();
}

namespace {{struct_name}} {
inline constexpr ::std::int32_t MaxSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>({{struct_fields.total_size_in_byte}}LL)).ValueOrDefault();
}
}  // namespace {{struct_name}}

template <class Storage>
inline constexpr ::std::int32_t
Generic{{struct_name}}View<Storage>::EmbossReservedDollarVirtualMaxSizeInBytesView::Read() {
  return {{struct_name}}::MaxSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t Generic{{struct_name}}View<
    Storage>::EmbossReservedDollarVirtualMaxSizeInBytesView::UncheckedRead() {
  return {{struct_name}}::MaxSizeInBytes();
}

namespace {{struct_name}} {
inline constexpr ::std::int32_t MinSizeInBytes() {
  return ::emboss::support::Maybe</**/::std::int32_t>(static_cast</**/::std::int32_t>({{struct_fields.total_size_in_byte}}LL)).ValueOrDefault();
}
}  // namespace {{struct_name}}

template <class Storage>
inline constexpr ::std::int32_t
Generic{{struct_name}}View<Storage>::EmbossReservedDollarVirtualMinSizeInBytesView::Read() {
  return {{struct_name}}::MinSizeInBytes();
}

template <class Storage>
inline constexpr ::std::int32_t Generic{{struct_name}}View<
    Storage>::EmbossReservedDollarVirtualMinSizeInBytesView::UncheckedRead() {
  return {{struct_name}}::MinSizeInBytes();
}

{% endfor %}

{% endif %}




}  // namespace test



}  // namespace emboss




#endif  // {{header_guard}}